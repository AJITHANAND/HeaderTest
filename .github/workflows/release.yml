name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux → self-hosted runner (you must have this runner tagged appropriately)
          - runner: self-hosted
            goos: linux
            arch: amd64
          - runner: self-hosted
            goos: linux
            arch: arm64

          # Windows → GitHub‑hosted
          - runner: windows-latest
            goos: windows
            arch: amd64

          # macOS → GitHub‑hosted
          - runner: macos-latest
            goos: darwin
            arch: amd64
          - runner: macos-latest
            goos: darwin
            arch: arm64
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          
      - name: Setup additional architecture support for Linux
        if: matrix.goos == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build for macOS and Linux
        if: matrix.goos != 'windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.goos == 'linux' && matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
        run: |
          mkdir -p dist
          go build -o dist/HeaderTest-${{ matrix.goos }}-${{ matrix.arch }} ./cmd/HeaderTest
      
      - name: Build for Windows
        if: matrix.goos == 'windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -o dist/HeaderTest-${{ matrix.goos }}-${{ matrix.arch }}.exe ./cmd/HeaderTest
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HeaderTest-${{ matrix.goos }}-${{ matrix.arch }}
          path: |
            dist/*

  test:
    name: Go Test
    runs-on: ${{ matrix.runner }}
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    strategy:
      matrix:
        include:
          - runner: self-hosted
            goos: linux
            arch: amd64
          - runner: windows-latest
            goos: windows
            arch: amd64
          - runner: macos-latest
            goos: darwin
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      - name: Run Go tests
        run: go test ./...

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded files
        run: ls -R artifacts
      
      - name: Calculate checksums
        run: |
          mkdir -p release
          find artifacts -type f -not -name "*.md5" -not -name "*.sha256" | while read file; do
            cp "$file" release/
            cd release
            filename=$(basename "$file")
            md5sum "$filename" > "${filename}.md5"
            sha256sum "$filename" > "${filename}.sha256"
            cd ..
          done
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}